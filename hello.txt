git init - initialise

git status - status of repo

git add file file1 file2 - add these files only
git add . -> adds all files

git commit -m "MSG" - commit all changes.

git log - short log of all commits
git log --oneline - just shows message of commit
git log -p - shows patch of code changed.

git diff - see all changes made to file after commit

Steps to make a remote repo:
1. Create a repo in GITHUB
2. Copy its link and link to local repo in GIT CLI  --->   git remote add origin <URL>
NOTE: origin is the variable that points to URL.
3. then push the local repo, to github --->  git push origin master
NOTE: now on making any changes to repo, we need to commit and push to remote.

Benefits of branching:
1. Separates code for different features
2. Hence helps in avoiding situations where new code might hinder the functioning of older code.

git branch - shows all branches
git checkout NAME - checks out of current branch and moves control to NAME branch
git checkout -b dev - creates and checks out to the dev branch.


NOTE:
there are 2 types of commits. SEE!?
	1. self commit ?!
	2. merge commit - extra commit

MERGING
1. First check out to the branch where we need to merge all the code from 1 branch
git checkout mainBranch

2. Merge
git merge featureBranch



NOTE:
When we checkout to another branch, the files commited just in the curr branch wont be visible in other branches.!

Solving the MERGE CONFLICT
Remove the 3 lines of conflict
Change as per yourself. and then COMMIT the file.

To Do later:
1. git stash
2. see commands for Removal/change in commits. 
3. moving HEAD.

GOOD PRACTICES:
1. Write short and meaningful commit messages.
2. Use meaningful and standard names for remote, branches etc. (origin, featureBranch, navbarBranch)